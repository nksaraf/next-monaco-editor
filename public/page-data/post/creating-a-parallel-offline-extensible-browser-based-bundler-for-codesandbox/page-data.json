{"componentChunkName":"component---src-templates-post-js","path":"/post/creating-a-parallel-offline-extensible-browser-based-bundler-for-codesandbox","webpackCompilationHash":"43a07f76784e304bf1a0","result":{"data":{"blogPost":{"fields":{"authors":["Ives van Hoorne"],"date":"2017-08-27T00:00:00.000Z","description":"Finding the right balance between the look and feel of Webpack, and using browser based technologies.","photo":"https://avatars0.githubusercontent.com/u/587016?s=460&v=4","slug":"creating-a-parallel-offline-extensible-browser-based-bundler-for-codesandbox","title":"Creating a parallel, offline, extensible, browser based bundler for CodeSandbox"},"frontmatter":{"banner":{"publicURL":"/static/banner-21a8c728cd9c5b6e040f37baf7f6c84a.png"}},"html":"<p>When I first started <a href=\"https://codesandbox.io\">CodeSandbox</a>, I was completely\nfocused on <a href=\"https://github.com/facebook/react\">React</a> development. We even named\nit 'ReactSandbox' at first, but I changed it to CodeSandbox last minute so we\ncould expand to other libraries. I'm proud to say that we now succeeded in that\nregard!</p>\n<p>The past week we slowly rolled out support for other libraries. We now have\nsupport for React, <a href=\"https://github.com/vuejs/vue\">Vue</a> and\n<a href=\"https://github.com/preactjs/preact\">Preact</a> templates and are planning to\nsupport <a href=\"https://github.com/angular/angular\">Angular</a>,\n<a href=\"https://github.com/facebook/reason\">ReasonML</a> and\n<a href=\"https://github.com/sveltejs/svelte\">Svelte</a> (let me know if you have other\nsuggestions). To make this happen I had to rewrite the bundler from scratch. In\nthis post I will explain mostly how the new bundler is built and what decisions\nI took to get there.</p>\n<!-- https://vue.codesandbox.io -->\n<p><iframe src=\"https://codesandbox.io/embed/vue?fontsize=14&view=split\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"></iframe></p>\n<!-- Vue -->\n<!-- https://preact.codesandbox.io -->\n<p><iframe src=\"https://codesandbox.io/embed/preact?fontsize=14&view=split\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"></iframe></p>\n<!-- Preact -->\n<section>\n<h2 id=\"past\"><a href=\"#past\" aria-label=\"past permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Past</h2>\n<p>The first bundler we used was <em>very</em> primitive: for each requested file we would\nfirst transpile it, evaluate it and then cache the result. When a file changed\nwe would just throw away the cache for all files dependent on that file and\nstart over again. This worked for <a href=\"https://github.com/babel/babel\">Babel</a>, but\nwouldn't work for other loaders that need asynchronous transpiling like\n<a href=\"https://github.com/sass/sass\">Sass</a>. Creating\n<a href=\"https://en.wikipedia.org/wiki/Source-to-source_compiler\">transpilers</a> for e.g.\nVue turned out to be even harder in the old system. It was evident that I had to\nrethink the bundling process if we want to support libraries like Vue, plus it\nwould give me the chance to improve the bundler.</p>\n<h4 id=\"webpack-in-the-browser\"><a href=\"#webpack-in-the-browser\" aria-label=\"webpack in the browser permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>webpack in the browser</h4>\n<p>My first idea was to make <a href=\"https://github.com/webpack/webpack\"><code class=\"language-text\">webpack</code></a> work\nin the browser. Almost all existing CLIs already use <code class=\"language-text\">webpack</code> and it would\nrequire no work to add a new loader if it already works with <code class=\"language-text\">webpack</code>.\nExporting to a <code class=\"language-text\">webpack.config.js</code> for the download function would also be\neffortless and users would be able to provide their own config. Sounds like the\nperfect scenario, right? For me as well! It sounds too good to be true, and it\nturned out to be.</p>\n<p>I got <code class=\"language-text\">webpack</code> running in the browser, however the bundle size was 3.5MB\nuglified. I had to provide many polyfills and compilation threw a dozen warnings\nbecause of dynamic requires. Furthermore, only half of the loaders worked.\n<code class=\"language-text\">webpack</code> assumes a <a href=\"https://github.com/nodejs/node\">Node</a> environment, and it\nturned out that the cost to simulate that environment was (in my opinion) too\nbig for the advantages gained from it. My second reason is that CodeSandbox is a\nvery specific platform, and if we build the bundler ourselves we can completely\noptimize for that platform.</p>\n<h4 id=\"webpack-loader-api-in-the-browser\"><a href=\"#webpack-loader-api-in-the-browser\" aria-label=\"webpack loader api in the browser permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>webpack Loader API in the browser</h4>\n<p>My second idea was to write my own bundler, but with a loader API very close to\n<code class=\"language-text\">webpack</code>. The advantage of this is that the bundler \"feels\" like <code class=\"language-text\">webpack</code>, but\nis optimized for a browser environment. Writing loaders would be very easy; we\ncan just take an existing <code class=\"language-text\">webpack</code> loader, strip all SSR, Node and production\nlogic away and it <em>should</em> work in CodeSandbox. Another <strong>big</strong> advantage is\nthat we assume a browser environment, so we can abuse browser APIs like\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\">Web Workers</a>,\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\">Service Workers</a>\nand code splitting!</p>\n</section>\n<section>\n<h2 id=\"implementation\"><a href=\"#implementation\" aria-label=\"implementation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implementation</h2>\n<p>For the actual implementation I tried to achieve the best of both worlds: close\nloader API surface with <code class=\"language-text\">webpack</code> and full optimization for CodeSandbox. It\nshould work faster than first bundler, work offline and it should be extensible.\nThe final bundler distinguishes three phases: configuration, transpilation and\nevaluation.</p>\n<h4 id=\"configuration\"><a href=\"#configuration\" aria-label=\"configuration permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuration</h4>\n<p>The new bundler has been built with templates in mind. For every template we\nhave (currently React, Vue and Preact) we define a new preset. These presets\ncontain configurations you can also find in a <code class=\"language-text\">webpack</code> config: aliases, default\nloaders and default extensions. The function of a <code class=\"language-text\">Preset</code> is to return what\nloaders are used for a file type, and how files are resolved. The <code class=\"language-text\">Preset</code> for\nPreact looks like this:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> babelTranspiler <span class=\"token keyword\">from</span> <span class=\"token string\">'../../transpilers/babel'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> jsonTranspiler <span class=\"token keyword\">from</span> <span class=\"token string\">'../../transpilers/json'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> stylesTranspiler <span class=\"token keyword\">from</span> <span class=\"token string\">'../../transpilers/css'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> sassTranspiler <span class=\"token keyword\">from</span> <span class=\"token string\">'../../transpilers/sass'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> rawTranspiler <span class=\"token keyword\">from</span> <span class=\"token string\">'../../transpilers/raw'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> stylusTranspiler <span class=\"token keyword\">from</span> <span class=\"token string\">'../../transpilers/stylus'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> lessTranspiler <span class=\"token keyword\">from</span> <span class=\"token string\">'../../transpilers/less'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> asyncTranspiler <span class=\"token keyword\">from</span> <span class=\"token string\">'./transpilers/async'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> Preset <span class=\"token keyword\">from</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> preactPreset <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Preset</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'preact-cli'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ts'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'tsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'less'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'scss'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sass'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'styl'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'css'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    preact$<span class=\"token punctuation\">:</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// preact-compat aliases for supporting React dependencies:</span>\n    react<span class=\"token punctuation\">:</span> <span class=\"token string\">'preact-compat'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'preact-compat'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'create-react-class'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'preact-compat/lib/create-react-class'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'react-addons-css-transition-group'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'preact-css-transition-group'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npreactPreset<span class=\"token punctuation\">.</span><span class=\"token function\">registerTranspiler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span> <span class=\"token operator\">=></span> <span class=\"token regex\">/\\.jsx?$/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    transpiler<span class=\"token punctuation\">:</span> babelTranspiler<span class=\"token punctuation\">,</span>\n    options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      presets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token comment\">// babel preset env starts with latest, then drops rules.</span>\n        <span class=\"token comment\">// We don't have env, so we just support latest</span>\n        <span class=\"token string\">'latest'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'stage-1'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'transform-object-assign'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'transform-decorators-legacy'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">'transform-react-jsx'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> pragma<span class=\"token punctuation\">:</span> <span class=\"token string\">'h'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">'jsx-pragmatic'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            module<span class=\"token punctuation\">:</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">export</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">import</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npreactPreset<span class=\"token punctuation\">.</span><span class=\"token function\">registerTranspiler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span> <span class=\"token operator\">=></span> <span class=\"token regex\">/\\.s[a|c]ss/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> transpiler<span class=\"token punctuation\">:</span> sassTranspiler <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> transpiler<span class=\"token punctuation\">:</span> stylesTranspiler <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npreactPreset<span class=\"token punctuation\">.</span><span class=\"token function\">registerTranspiler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span> <span class=\"token operator\">=></span> <span class=\"token regex\">/\\.less/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> transpiler<span class=\"token punctuation\">:</span> lessTranspiler <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> transpiler<span class=\"token punctuation\">:</span> stylesTranspiler <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npreactPreset<span class=\"token punctuation\">.</span><span class=\"token function\">registerTranspiler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span> <span class=\"token operator\">=></span> <span class=\"token regex\">/\\.json/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> transpiler<span class=\"token punctuation\">:</span> jsonTranspiler <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npreactPreset<span class=\"token punctuation\">.</span><span class=\"token function\">registerTranspiler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span> <span class=\"token operator\">=></span> <span class=\"token regex\">/\\.styl/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> transpiler<span class=\"token punctuation\">:</span> stylusTranspiler <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> transpiler<span class=\"token punctuation\">:</span> stylesTranspiler <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Support for !async statements</span>\npreactPreset<span class=\"token punctuation\">.</span><span class=\"token function\">registerTranspiler</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token boolean\">false</span> <span class=\"token comment\">/* never load without explicit statement */</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> transpiler<span class=\"token punctuation\">:</span> asyncTranspiler <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// This transpiler is backup for all other files</span>\npreactPreset<span class=\"token punctuation\">.</span><span class=\"token function\">registerTranspiler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> transpiler<span class=\"token punctuation\">:</span> rawTranspiler <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> preactPreset<span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h4 id=\"transpilation\"><a href=\"#transpilation\" aria-label=\"transpilation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Transpilation</h4>\n<p>Transpilation is the most important phase. Like the name implies: it does\ntranspilation, but it's also responsible for building the dependency graph. For\nevery transpiled file we traverse the\n<a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\">AST</a>, search for all\nrequire statements, and add them to the tree. This doesn't only happen to <code class=\"language-text\">.js</code>\nfiles, it also happens for\n<a href=\"https://github.com/Microsoft/TypeScript\">TypeScript</a>,\n<a href=\"https://github.com/sass/sass\">Sass</a>, <a href=\"https://github.com/less/less.js\">LESS</a>\nand <a href=\"https://github.com/stylus/stylus\">Stylus</a> files. The advantage of building\nthe tree during transpilation is that we only have to build the AST once.</p>\n<p>Transpiled output is saved in a\n<a href=\"https://github.com/codesandbox/codesandbox-client/blob/52b5cc248fe25fd37de034d5a39a286e395817e3/packages/app/src/sandbox/eval/transpiled-module.js\"><code class=\"language-text\">TranspiledModule</code></a>.\nOne file can be associated with multiple <code class=\"language-text\">TranspiledModule</code>s, because files can\nbe required in different ways. For example, <code class=\"language-text\">require(&#39;raw-loader!./Hello.js&#39;)</code>\nisn't the same as <code class=\"language-text\">require(&#39;./Hello.js&#39;)</code>.</p>\n<p><iframe src=\"https://codesandbox.io/embed/q8kjprjnww?fontsize=14&view=split\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"></iframe></p>\n<!-- Different require syntax is supported! -->\n<h4 id=\"web-workers\"><a href=\"#web-workers\" aria-label=\"web workers permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Workers</h4>\n<p>A very important improvement is that almost all transpilation happens in\nparallel using a web worker pool manager based on your amount of cores. This\nmeans that we use separate threads for transpilation, so transpilation happens\nin parallel by default. This removes load from the UI thread (reduces stutters)\nand also greatly improves transpilation time: for me the transpilation time (and\nthus loading time) was 2 to 4 times shorter! Transpilation is the only\nasynchronous stage of the three.</p>\n<p><blockquote class=\"twitter-tweet\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">🤓 How much can moving Babel into a web-worker impact perf? Here&#39;s an example of processing a large UMD file while scrolling around the page. <a href=\"https://t.co/OtjLvcDYoI\">pic.twitter.com/OtjLvcDYoI</a></p>&mdash; Brian Vaughn (@brian_d_vaughn) <a href=\"https://twitter.com/brian_d_vaughn/status/901488766581227520\">August 26, 2017</a></blockquote></p>\n<!-- What happens if you move Babel into a web worker? -->\n<h4 id=\"code-splitting\"><a href=\"#code-splitting\" aria-label=\"code splitting permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code Splitting</h4>\n<p>Every loader is dynamically loaded based on their usage. If your sandbox only\ncontains JavaScript files, we will only download the Babel loader. This saves a\nlot of time and bandwidth, since transpilers tend to be very big.</p>\n<h4 id=\"offline-support\"><a href=\"#offline-support\" aria-label=\"offline support permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Offline Support</h4>\n<p>One of the requirements of the bundler is to work offline, that's why all the\nunused loaders are still downloaded in the background by a service worker. There\nare no external dependencies while working on a sandbox, so after downloading\nthe transpilers it can bundle offline whenever wherever.</p>\n<h4 id=\"evaluation\"><a href=\"#evaluation\" aria-label=\"evaluation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Evaluation</h4>\n<p>Although I've called this bundler a 'bundler', there is actually no bundling\nhappening! We already have access to all the code, so the only task left to do\nis evaluation of the correct file. The entry point gets evaluated using a simple\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code class=\"language-text\">eval</code></a>,\nwe provide a stubbed require that resolves the correct <code class=\"language-text\">TranspiledModule</code> and\neither evaluates it or returns the cache if it exists.</p>\n<h4 id=\"hot-module-reloading\"><a href=\"#hot-module-reloading\" aria-label=\"hot module reloading permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>'Hot Module Reloading'</h4>\n<p>The output of transpilation and evaluation are cached. When a file changes we\nthrow away the transpilation of that specific file and compilation of that file\nand all parents (all files requireing that file). From that point we transpile\nand evaluate from the entry point again. I put HMR into quotes, because this is\nnot the same implementation as the real HMR solution. We don't have\n<code class=\"language-text\">​module.hot</code>​, because it would take a setup to make HMR work in a sandbox and\nI wanted it to work out of the box. (<em>edit: we now do support <code class=\"language-text\">​module.hot</code>\nsince CodeSandbox 2.5!</em>)</p>\n</section>\n<section>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>I'm proud of this bundler, as it allows us to do more and is also much faster\nthan the previous version. With the new implementation we have the best of both\nworlds; we have a close API surface with <code class=\"language-text\">webpack</code> and it's optimized for\nCodeSandbox and the browser. It's of course not as advanced as other solutions\nlike <code class=\"language-text\">webpack</code>, but it's perfect for CodeSandbox. It now doesn't take longer\nthan an hour to add a new template and loaders are very easy to port from their\n<code class=\"language-text\">webpack</code> counterparts. This makes us very flexible in the future.</p>\n<h4 id=\"performance\"><a href=\"#performance\" aria-label=\"performance permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Performance</h4>\n<p>The performance has also improved with the new bundler. Initial load time can be\npretty high, because the transpilers need to be downloaded. All transpilers are\ncached using service workers or browser cache though, so on second try it should\nbe much faster. Initial compilation takes between 1 and 2 seconds on my Macbook\n13\" 2015, all recompilation takes between 35 and 40 milliseconds(!). These tests\nwere run on\n<a href=\"https://github.com/reduxjs/redux/tree/master/examples/todomvc\">the TodoMVC implementation of Redux</a>.\nIt's faster because transpilation now happens in parallel on separate threads\nand transpilation already starts while dependencies are being fetched.</p>\n<h4 id=\"source\"><a href=\"#source\" aria-label=\"source permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Source</h4>\n<p>If you want to see the real goods; you can find the source\n<a href=\"https://github.com/codesandbox/codesandbox-client/blob/52b5cc248fe25fd37de034d5a39a286e395817e3/packages/app/src/sandbox/eval/manager.js\">here</a>.\nThis is the <code class=\"language-text\">Manager</code> class, it's responsible for connecting the <code class=\"language-text\">Sandbox</code>, the\n<code class=\"language-text\">Preset</code> and all <code class=\"language-text\">TranspiledModule</code>s.</p>\n</section>\n<section>\n<h2 id=\"future\"><a href=\"#future\" aria-label=\"future permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Future</h2>\n<p>The new bundler opens a lot of exciting possibilities. The two biggest are\ncustom template support and full offline support.</p>\n<h4 id=\"custom-template-support\"><a href=\"#custom-template-support\" aria-label=\"custom template support permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Template Support</h4>\n<p>We now have all these loaders like Sass and TypeScript, it would be nice if we\ncould also unlock these for the React sandboxes. There should be a button to\n<code class=\"language-text\">eject</code> a sandbox, which enables you to specify loaders and things like custom\nBabel configuration. The main work for this has already been done, we only need\nthe API to support it next.</p>\n<h4 id=\"full-offline-support\"><a href=\"#full-offline-support\" aria-label=\"full offline support permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Full Offline Support</h4>\n<p>Everything works offline already, but for full offline support we need to allow\nyou to save sandboxes offline. This allows you to work offline on your projects\nforever, and upload to CodeSandbox whenever you'd like. The only feature that\nrequires an internet connection are <a href=\"https://npmjs.com\">npm</a> dependencies, but\nwe already cache all npm results. We'll give you the option to precache\ncombinations for when you're planning a trip or flight.</p>\n</section>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"1c777aa6-899e-5a10-91cb-b526c616faae"}}}